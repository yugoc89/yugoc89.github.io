require.config({

	paths: {
		'classie': '/assets/js/components/classie',
		'jquery': '/assets/js/vendor/jquery-1.10.2.min',
		'underscore': '/assets/js/vendor/underscore-min',
		'backbone': '/assets/js/vendor/backbone-min',
		'TweenLite': '/assets/js/components/TweenMax.min',
		'TimelineLite':'/assets/js/components/TimelineLite.min'
	},

	shim: {
		'underscore': {
			exports: '_'
		},
		'backbone': {
			deps: [
				'underscore',
				'jquery'
			],
			exports: 'Backbone'
		},
		'TweenLite': {
			exports: 'TweenLite'
		}
	}
});

require([
	'classie',
	'backbone',
	'TweenLite',
	'TimelineLite',
], function(classie, Backbone, TweenLite, TimelineLite) {

	'use strict';

	//--------------
	// Router
	//--------------
	$(document).on('click', '.navigation a, .article-link', function(event) {
		event.preventDefault();
		var router = new AppRouter();
		var href = $(event.currentTarget).attr('href');
		router.navigate(href, true);
		$('.navigation li').removeClass('active');
		$(this).addClass('active');
	});

	var currentView = null;

	var AppRouter = Backbone.Router.extend({

		url: '/',

		routes: {
			'': 'homeAction',
			'works/:id': 'worksAction',
			'*works': 'singleAction',
			'*page': 'defaultAction',
		},

		initialize: function(){
			if (Backbone.history.fragment === undefined) {
				$('main').remove();
			}
		},
		homeAction: function( home ) {
			var restfulPageUrl = '/';
			this.switchView(restfulPageUrl, MainView);
		},
		worksAction: function( id ) {
			var restfulPageUrl = this.url + 'works/' + id;
			var path = id.split('.html')[0];
			this.switchView(restfulPageUrl, MainView, path);
		},
		singleAction: function( id ) {
			var restfulPageUrl = this.url + id;
			this.switchView(restfulPageUrl, SingleView);
		},
		switchView: function(pageUrl, TargetView, categoryId) {
			var mainLoader = document.getElementById('loader');
			if (!classie.has( mainLoader, 'show') && TargetView !== SingleView) {
				classie.add( mainLoader, 'show' );
			}
			$.ajax({
				url: pageUrl,
				dataType: 'html',
				cache: false,
			})
			.done (function(html){
				//console.log('success!!');
				var element = $('#main', $(html));
				TweenLite.to('.container', 0.4, {
					x: '-100%',
					opacity: 0,
					onComplete: function() {
						window.scrollTo(0, 0);
						
						if (currentView) {
							currentView.remove();
						}
						$('.container').append(element);

						TweenLite.to('.container', 0.4, {
							x: '0%',
							opacity: 1,
							delay: 0.5,
							onComplete: function() {
								if (categoryId) {
									currentView = new TargetView({el:element, id: categoryId});	
								} else {
									currentView = new TargetView({el:element});
								}
								classie.remove( mainLoader, 'show' );
							}
						});
					}
				});
			})
			.fail(function() {
				alert("error");
				classie.remove( mainLoader, 'show' );
			});
		}
	});

	//--------------
	// Models
	//--------------
	var Category = Backbone.Model.extend({
		urlRoot: '/categories/',
		url: function() {
			return this.urlRoot + '?name=' + this.id;
		},
		//urlRoot: '/data.json',
		idAttribute: 'cid',
		initialize: function(){
		},
	});

	//--------------
	// Collection
	//--------------
	var Categories = Backbone.Collection.extend({
		model: Category,
		url: function(){
			console.log(this.options.id);
			if (this.options.id) {
				return '/data/' + this.options.id + '.json';
			} else {
				return '/data/index.json';
			}
		},
		initialize: function(models, options){
			this.options = options;
		}
	});

	//--------------
	// Views
	//--------------
	var MainView = Backbone.View.extend({

		el: $('.main'),
		events: {
			'click .googleMap-link': 'mapTrigger',
		},
		initialize: function(options, categoryId) {
			console.log('home!!');
			var that = this;

			// $(window).resize(function() {
			// 	that.setSize();
			// });

			$(this.el).unbind();

			this.template = _.template($('#template--index').html());

			_.bindAll(this, 'render');
			this.collection = new Categories([], { id: this.id });

			this.collection.fetch({
				data: $.param({ id: that.id}),
				success: function (collection, response) {
					that.render(response);
				},
				error: function (errorResponse) {
					console.log(errorResponse);
				},
				complete: function(xhr, textStatus) {
					console.log(textStatus);
				}
			});
		},		
		render: function(model) {
			this.delegateEvents();			
			$('.content').html(this.template({ categories: this.collection.toJSON() }));
			// this.setContentSize();
			return this;
		},
		setContentSize: function(){
			var contentWidth = $('.main').width();
			var contentHeight = $('.main').height();
			//var windowWidth = $(window).width();
			//var windowHeight = $(window).height();
			$('.container').css({
				width: contentWidth,
				height: contentHeight
			});
		},
	});

	var SingleView = Backbone.View.extend({
		el: $('.main'),
		events: {
			'mouseover .button--share': 'svgDraw',
			'click .button--back': 'historyBack'
		},
		initialize: function(){
			console.log('single');
			$(this.el).unbind();
			_.bindAll(this, 'svgDraw');
			this.render();
		},
		render: function(){
			this.delegateEvents();
			// var backURL = Backbone.history.getFragment();
			// $('.button--back').attr('href', backURL);
		},
		svgDraw: function(event) {
			var svg = event.target;
			// var path = event.target.querySelector('path');
			svg.getElementsByTagName('animate')[0].beginElement();
		},
		historyBack: function(event) {
			if (window.history) {
				event.preventDefault();
				window.history.back();
			}
		}
	});

	new AppRouter();
	Backbone.emulateHTTP = true;
	Backbone.emulateJSON = true;
	Backbone.history.start({pushState: true});

	//--------------
	// Global
	//--------------
	function navigationLine () {
		$('.navigation li a').each(function(){
			$(this).mouseover(function() {
				var distance = $(this).position().left;
				var textWidth = $(this).width();
				TweenLite.to('.navigation-border', 0.3, {
					x: distance - 0.5,
					width: textWidth
				});
			});
		});
	}
	function navigationLineInitial() {

		var url = location.pathname;
		var singles = url.split('/').slice(1)[1];

		$('.navigation li').find('a').filter(function(){
			var href =  $(this).attr('href');
			return href !== '/' && href !=='#' && top.location.pathname.indexOf( href )===0 ;
		}).addClass('active');

		if (url === '/') {
			$('.navigation li a:first-child').addClass('active');
		} else if (singles) {
			$('.navigation li').find('a').filter(function(){
				var href =  $(this).attr('href').split('/').slice(1)[1];
				return singles + '.html' === href;
			}).addClass('active');
		}

		var el = '.navigation a.active';

		var distance = $(el).position().left;
		var textWidth = $(el).width();

		TweenLite.set('.navigation-border', {
			x: distance,
			width: textWidth
		});
	}

	navigationLineInitial();
	navigationLine();

	// $(window).scroll(function(event) {
	// 	/* Act on the event */
	// 	var winScroll = $(window).scrollTop();
	// 	if (winScroll > 360) {
	// 		$('.navigation').addClass('fixed');
	// 	} else {
	// 		$('.navigation').removeClass('fixed');
	// 	}
	// });

	$.fn.cssHide = function(value, callback){
		var amount = (value) ? value : 0;
		TweenLite.to(this, amount, {
			css: {
				opacity: 0,
				visibility: 'hidden'
			},
			onComplete: function(){
				if (callback) {
					callback();
				}
			}
		});
		return false;
	};

	$.fn.cssShow = function(value, callback){
		var amount = (value) ? value : 0;
		TweenLite.to(this, amount, {
			css: {
				opacity: 1,
				visibility: 'inherit'
			},
			onComplete: function(){
				if (callback) {
					callback();
				}
			}
		});
		return false;
	};
});

